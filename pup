#!/bin/bash

LOG=.woof.log
SYMLINK=~/.local/bin/pup
SYMLINK_TARGET="$(pwd)/pup"


#### log ####

log_command() {
    ts=$(date +'%FT%T')
    echo "# $ts" >> "$LOG"
    echo "$1" >> "$LOG"
}

log() {
    ts=$(date +'%FT%T')
    for arg in "$@"; do
        echo "# $ts - $arg" | tee -a "$LOG"
    done
}

install_init_pixi_if_not_exists() {
    if ! command -v pixi &> /dev/null; then
        curl -fsSL https://pixi.sh/install.sh | bash
    fi
    [[ -f pixi.toml ]] || pixi init . 
}


#### init ####

if [ -z "$1" ]; then
    USAGE="\n
    \e[1m\e[4mUsage\e[0m: (each subcommand shows more help)\n
    pup\n
    \tinitialize and link 🐶 to PATH\n
    pup py\n
    \tinteractively install base python to current folder\n
    \tif you know what you need:\n
    \tpup py3.12 jupyter \"jupyter-collaboration>=2\"\n
    \t(additional arguments go into 'pixi add')\n
    \n"
    echo -e $USAGE
    log_command "$0 $*"
    log woof!

    SYMLINK_CURRENT=$(readlink -f "$SYMLINK")
    if [ "$SYMLINK_CURRENT" != "$SYMLINK_TARGET" ]; then
        mkdir -p ~/.local/bin
        ln -s --force "$(pwd)"/pup $SYMLINK
        log "🐶 = $(pup which)"
    fi
    exit 0
fi

#### py|python ####

if [[ "$1" =~ ^py$|^python$ ]]; then
    USAGE="\n
    \e[1m\e[4mUsage\e[0m: pup $1{version} [ADDITIONAL PACKAGES]\n
    For example:\n
    \tpup py3.12 jupyter jupyter-collaboration>=2\n
    \e[4mNote\e[0m:\n
    \tthis command is meant to be used once during the first base layer setup;\n
    \tbeyond that, use 'pixi add'\n
    \n"
    echo -e $USAGE
    read -ei "" -p $'\e[0;33minstall which python version (blank = latest)? \e[0m' PYVER
    PACKAGES=${@:2}
    read -ei "${PACKAGES:-notebook>=7}" -p $'\e[0;33many additional packages? \e[0m' PACKAGES
    install_init_pixi_if_not_exists
    COMMAND="pixi add uv python${PYVER:+=$PYVER} $PACKAGES"
    log "🐶 asked for: '$COMMAND'"
    $COMMAND
    exit 0
fi

if [[ "$1" =~ ^py3.*$ ]]; then
    log_command "$0 $*"
    install_init_pixi_if_not_exists
    COMMAND="pixi add uv python=${1#py} ${@:2}"
    log "🐶 asked for: '$COMMAND'"
    $COMMAND
    exit 0
fi


#### fetch|install ####
if [[ "$1" =~ ^fetch$|^install$ ]]; then
    USAGE="\e[1m\e[4mUsage\e[0m: pup $1 [WHERE] [WHAT] [OPTIONS]"
    if [ -z "$2" ]; then
        echo -e $USAGE
        read -ei "." -p "Fetch packages where? " WHERE
        read -ei "" -p "What packages? " WHAT
        read -ei "" -p "Options to pass to 'uv pip install'? " OPTIONS
        COMMAND="pup fetch $WHERE $WHAT $OPTIONS"
        log "🐶 asked for: '$COMMAND'"
        $COMMAND
        exit 0
    fi
    if [ $# -eq 2 ]; then
        echo "`🐶 fetch` needs more arguments"
        echo -e $USAGE
    fi
    if [ $# -gt 2 ] && [ "$2" = "." ]; then
        COMMAND="pixi run uv pip install $WHAT $OPTIONS"
    fi
    if [ -n "$(pixi run jupyter kernelspec)" ] && [ 0 > 0 ]; then
        COMMAND="pup newkernel $2 && what"
    else
        COMMAND="pup new $2 && what"
    fi
    log "🐶 asked for: '$COMMAND'"
    # $COMMAND
    exit 0
fi

#### new ####

if [ "$1" == "new" ]; then
    log_command "$0 $*"
    pixi run uv venv -p $(pixi run which python) "$2"/.venv
    log "pup & uv created new environment in $2"
fi


#### newkernel ####

if [ "$1" == "newkernel" ]; then
    log_command "$0 $*"
    pup new $2
    source "$2"/.venv/bin/activate
    uv pip install ipykernel
    # uv pip list
    python -m ipykernel install --user --name $2
    deactivate
    pixi run jupyter kernelspec list
fi


#### which ####

if [ "$1" == "which" ]; then
    echo $(ls "$SYMLINK") -\> $(readlink -f $SYMLINK)
    exit 0
fi


#### unknown command ####
echo -e "🐶 does not know 'pup $*'\nrun 'pup' to list commands"